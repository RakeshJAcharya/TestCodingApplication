AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation"

Parameters:
  LambdaFuncName:
    Type: String
    Description: Name of the lambdaFunction that contains the .NET Core Lambda API code
  LambdaCodeS3Bucket:
    Type: String
    Description: Name of the S3 bucket that contains the .NET Core Lambda API code
  LambdaCodeS3Key:
    Type: String
    Description: S3 key of the .NET Core Lambda API code
  ReactAppS3Bucket:
    Type: String
    Description: Name of the S3 bucket that contains the ReactJS code
  

Resources:
  
  lambdafunctioniamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "dtLambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "cloudformation demo"
      FunctionName: !Ref LambdaFuncName
      Handler: PostCodeProject::PostCodeProject.LambdaEntryPoint::FunctionHandlerAsync
      MemorySize: 128
      Role: !GetAtt lambdafunctioniamRole.Arn
      Runtime: dotnet6
      Timeout: 30
      Environment:
        Variables:
          key1: value1 # A map of key-value pairs that the Lambda function can access
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Tags:
        - Key: keyname
          Value: value

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: dtlambdagatewayapi

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  MyLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt lambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*"
      
  # Create an S3 Bucket that serves a static website (i.e. React app)
  mybucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ReactAppS3Bucket
      AccessControl: PublicRead # visitors need to be able to access the sie
      WebsiteConfiguration: # this makes the S3 Bucket a static website/app
        IndexDocument: index.html # default object served when visiting S3 domain
        ErrorDocument: index.html # just send to app, let React handle errors and routing

  # Add a Bucket Policy that lets public visitors access the web app
  mybucketpolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref mybucket # attach to bucket being created
      PolicyDocument:
        Id: mypolicy
        Version: 2012-10-17
        Statement: # lets the public access/view the contents of your Bucket, i.e. web app
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*' # wildcard, allow all requests
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref mybucket, /*]]
